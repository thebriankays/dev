/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    religions: Religion;
    timezones: Timezone;
    countries: Country;
    currencies: Currency;
    languages: Language;
    regions: Region;
    airlines: Airline;
    airports: Airport;
    routes: Route;
    'travel-advisories': TravelAdvisory;
    'visa-requirements': VisaRequirement;
    'michelin-restaurants': MichelinRestaurant;
    destinations: Destination;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    currencies: {
      destinations: 'destinations';
    };
    languages: {
      destinations: 'destinations';
    };
    regions: {
      destinations: 'destinations';
    };
  };
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    religions: ReligionsSelect<false> | ReligionsSelect<true>;
    timezones: TimezonesSelect<false> | TimezonesSelect<true>;
    countries: CountriesSelect<false> | CountriesSelect<true>;
    currencies: CurrenciesSelect<false> | CurrenciesSelect<true>;
    languages: LanguagesSelect<false> | LanguagesSelect<true>;
    regions: RegionsSelect<false> | RegionsSelect<true>;
    airlines: AirlinesSelect<false> | AirlinesSelect<true>;
    airports: AirportsSelect<false> | AirportsSelect<true>;
    routes: RoutesSelect<false> | RoutesSelect<true>;
    'travel-advisories': TravelAdvisoriesSelect<false> | TravelAdvisoriesSelect<true>;
    'visa-requirements': VisaRequirementsSelect<false> | VisaRequirementsSelect<true>;
    'michelin-restaurants': MichelinRestaurantsSelect<false> | MichelinRestaurantsSelect<true>;
    destinations: DestinationsSelect<false> | DestinationsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | WebGLTextBlock
    | TravelGlobeBlock
    | ThreeDCarouselBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  webglEnabled?: boolean | null;
  webglSettings?: {
    distortion?: number | null;
    parallax?: number | null;
    hover?: boolean | null;
  };
  caption?: string | null;
  aspectRatio?: ('16:9' | '4:3' | '1:1' | '9:16' | 'original') | null;
  glassEffect?: {
    enabled?: boolean | null;
    variant?: ('card' | 'panel' | 'subtle' | 'frost' | 'liquid') | null;
    intensity?: number | null;
  };
  fluidOverlay?: {
    enabled?: boolean | null;
    intensity?: number | null;
    color?: string | null;
  };
  webglEffects?: {
    distortion?: number | null;
    parallax?: number | null;
    hover?: boolean | null;
    transition?: ('fade' | 'slide' | 'morph') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WebGLTextBlock".
 */
export interface WebGLTextBlock {
  text: string;
  fontSize?: ('small' | 'medium' | 'large' | 'xlarge') | null;
  textAlign?: ('left' | 'center' | 'right') | null;
  effect?: ('none' | 'distortion' | 'glitch' | 'wave' | 'particles' | 'morph' | 'outline') | null;
  /**
   * Hex color code for the text
   */
  color?: string | null;
  /**
   * Path to the font file
   */
  font?: string | null;
  animationTrigger?: ('onLoad' | 'onHover' | 'onScroll' | 'continuous') | null;
  secondaryText?: string | null;
  glassEffect?: {
    enabled?: boolean | null;
    variant?: ('card' | 'panel' | 'subtle' | 'frost' | 'liquid') | null;
    intensity?: number | null;
  };
  fluidOverlay?: {
    enabled?: boolean | null;
    intensity?: number | null;
    color?: string | null;
  };
  webglEffects?: {
    distortion?: number | null;
    parallax?: number | null;
    hover?: boolean | null;
    transition?: ('fade' | 'slide' | 'morph') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'webGLText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelGlobeBlock".
 */
export interface TravelGlobeBlock {
  destinations?:
    | {
        id: string;
        name: string;
        position: {
          lat: number;
          lng: number;
        };
        visitors?: number | null;
        category?: ('city' | 'beach' | 'mountain' | 'historic' | 'adventure') | null;
        description?: string | null;
        imageUrl?: string | null;
      }[]
    | null;
  routes?:
    | {
        id: string;
        from: string;
        to: string;
        flights?: number | null;
        type?: ('direct' | 'popular' | 'seasonal') | null;
      }[]
    | null;
  globeSettings?: {
    interactive?: boolean | null;
    autoRotate?: boolean | null;
    rotationSpeed?: number | null;
    showAtmosphere?: boolean | null;
    showClouds?: boolean | null;
    showNightLights?: boolean | null;
    enableFilters?: boolean | null;
  };
  appearance?: {
    /**
     * Hex color code for the globe base
     */
    globeColor?: string | null;
    /**
     * Hex color code for land masses
     */
    landColor?: string | null;
    /**
     * Hex color code for the atmosphere glow
     */
    atmosphereColor?: string | null;
    /**
     * Hex color code for destination markers
     */
    markerColor?: string | null;
    /**
     * Hex color code for flight routes
     */
    routeColor?: string | null;
  };
  customTextures?: {
    earthTexture?: (number | null) | Media;
    bumpTexture?: (number | null) | Media;
    specularTexture?: (number | null) | Media;
    cloudTexture?: (number | null) | Media;
  };
  glassEffect?: {
    enabled?: boolean | null;
    variant?: ('card' | 'panel' | 'subtle' | 'frost' | 'liquid') | null;
    intensity?: number | null;
  };
  fluidOverlay?: {
    enabled?: boolean | null;
    intensity?: number | null;
    color?: string | null;
  };
  webglEffects?: {
    distortion?: number | null;
    parallax?: number | null;
    hover?: boolean | null;
    transition?: ('fade' | 'slide' | 'morph') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'travelGlobe';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ThreeDCarouselBlock".
 */
export interface ThreeDCarouselBlock {
  items?:
    | {
        image: number | Media;
        title: string;
        subtitle?: string | null;
        description?: string | null;
        link?: string | null;
        metadata?: {
          rating?: number | null;
          price?: string | null;
          location?: string | null;
          date?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  layout?: ('circular' | 'helix' | 'wave' | 'cylinder') | null;
  autoRotate?: boolean | null;
  rotationSpeed?: number | null;
  enableReflections?: boolean | null;
  enableParticles?: boolean | null;
  enableDepthFade?: boolean | null;
  radius?: number | null;
  spacing?: number | null;
  itemsVisible?: number | null;
  showControls?: boolean | null;
  showIndicators?: boolean | null;
  glassEffect?: {
    enabled?: boolean | null;
    variant?: ('card' | 'panel' | 'subtle' | 'frost' | 'liquid') | null;
    intensity?: number | null;
  };
  fluidOverlay?: {
    enabled?: boolean | null;
    intensity?: number | null;
    color?: string | null;
  };
  webglEffects?: {
    distortion?: number | null;
    parallax?: number | null;
    hover?: boolean | null;
    transition?: ('fade' | 'slide' | 'morph') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'threeDCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "religions".
 */
export interface Religion {
  id: number;
  /**
   * Name of the religion
   */
  name: string;
  /**
   * Brief description of the religion
   */
  description?: string | null;
  /**
   * Parent religion (e.g., Christianity for Catholic)
   */
  parentReligion?: (number | null) | Religion;
  updatedAt: string;
  createdAt: string;
}
/**
 * Timezone data for countries and regions
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timezones".
 */
export interface Timezone {
  id: number;
  /**
   * IANA timezone identifier (e.g., America/New_York)
   */
  name: string;
  /**
   * URL-friendly slug (e.g., america-new-york)
   */
  slug: string;
  /**
   * Human-readable name (e.g., Eastern Time (US & Canada))
   */
  label: string;
  /**
   * UTC offset in ±HH:MM format
   */
  offset: string;
  /**
   * UTC offset in minutes (negative for west of UTC)
   */
  offsetMinutes: number;
  /**
   * Whether this timezone observes daylight saving time
   */
  isDST?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries".
 */
export interface Country {
  id: number;
  name: string;
  /**
   * ISO-3166-1 alpha-2 (US, FR, etc.)
   */
  code: string;
  /**
   * ISO-3166-1 alpha-3 (USA, FRA, etc.)
   */
  code3?: string | null;
  /**
   * ISO-3166-1 numeric (840, etc.)
   */
  isoCode?: string | null;
  continent: 'africa' | 'antarctica' | 'asia' | 'europe' | 'north-america' | 'oceania-australia' | 'south-america';
  /**
   * Geographic region within continent
   */
  region?: string | null;
  subregion?: string | null;
  capital?: string | null;
  /**
   * Filename in /public/flags (auto-set from code)
   */
  flag?: string | null;
  /**
   * Primary country-code domain (.fr, .us, etc.)
   */
  webDomain?: string | null;
  /**
   * International dialing code (+1, +33, etc.)
   */
  dialingCode?: string | null;
  /**
   * What to call people from this country (American, French, etc.)
   */
  demonym?: string | null;
  /**
   * Official and commonly spoken languages
   */
  languages?: (number | Language)[] | null;
  /**
   * Religions practiced in the country with percentages
   */
  religions?:
    | {
        religion: number | Religion;
        /**
         * Percentage of population
         */
        percentage?: number | null;
        id?: string | null;
      }[]
    | null;
  timezones?: (number | Timezone)[] | null;
  currencies?: (number | Currency)[] | null;
  /**
   * Countries that share a land border
   */
  neighboringCountries?: (number | Country)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languages".
 */
export interface Language {
  id: number;
  name: string;
  /**
   * ISO 639-1 language code (e.g., en, fr, es)
   */
  code: string;
  nativeName?: string | null;
  /**
   * All destinations where this language is spoken
   */
  destinations?: {
    docs?: (number | Destination)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations".
 */
export interface Destination {
  id: number;
  title: string;
  /**
   * Search for a location using Google Places
   */
  locationData?: {
    address?: string | null;
    coordinates?: {
      lat?: number | null;
      lng?: number | null;
    };
    placeID?: string | null;
    country?: string | null;
    continent?: string | null;
    city?: string | null;
    isGoodForChildren?: boolean | null;
    isGoodForGroups?: boolean | null;
    priceLevel?: number | null;
    rating?: number | null;
    user_ratings_total?: number | null;
    reviews?:
      | {
          author_name?: string | null;
          rating?: number | null;
          text?: string | null;
          id?: string | null;
        }[]
      | null;
    photos?:
      | {
          photo_reference?: string | null;
          height?: number | null;
          width?: number | null;
          id?: string | null;
        }[]
      | null;
    tempCountryData?: {
      countryName?: string | null;
      countryCode?: string | null;
      currencyCode?: string | null;
      languageCode?: string | null;
      region?: string | null;
    };
  };
  lat?: number | null;
  lng?: number | null;
  continent: 'Africa' | 'Asia' | 'Europe' | 'North America' | 'Oceania' | 'South America' | 'Antarctica';
  city?: string | null;
  state?: string | null;
  googleMapsUri?: string | null;
  countryRelation?: (number | null) | Country;
  currencyRelation?: (number | null) | Currency;
  languagesRelation?: (number | Language)[] | null;
  regionRelation?: (number | null) | Region;
  country?: string | null;
  /**
   * Country flag SVG file
   */
  flagSvg?: string | null;
  languages?: string | null;
  countryData?: {
    label?: string | null;
    code?: string | null;
    capital?: string | null;
    region?: string | null;
    currency?: {
      code?: string | null;
      label?: string | null;
      symbol?: string | null;
    };
    language?: {
      code?: string | null;
      label?: string | null;
      nativeName?: string | null;
    };
    flag?: string | null;
  };
  isGoodForChildren?: boolean | null;
  isGoodForGroups?: boolean | null;
  priceLevel?: number | null;
  rating?: number | null;
  user_ratings_total?: number | null;
  reviews?:
    | {
        author_name?: string | null;
        rating?: number | null;
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  featuredImage?: (number | null) | Media;
  featuredVideo?: (number | null) | Media;
  mediaGallery?: (number | Media)[] | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedDestinations?: (number | Destination)[] | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  /**
   * Show photorealistic 3D map view
   */
  enable3DMap?: boolean | null;
  areaExplorerConfig?: {
    showPOIs?: boolean | null;
    poiTypes?:
      | (
          | 'restaurant'
          | 'bar'
          | 'cafe'
          | 'store'
          | 'supermarket'
          | 'park'
          | 'bank'
          | 'school'
          | 'bus_station'
          | 'train_station'
          | 'airport'
          | 'parking'
          | 'lodging'
          | 'tourist_attraction'
        )[]
      | null;
    /**
     * Maximum number of POIs to display
     */
    poiDensity?: number | null;
    /**
     * Search radius for POIs (100m - 50km)
     */
    searchRadius?: number | null;
    /**
     * Automatically rotate the camera around the destination
     */
    autoOrbit?: boolean | null;
    theme?: ('dark' | 'light') | null;
    /**
     * Override the default center point to focus on a specific landmark or area
     */
    customCenter?: {
      enabled?: boolean | null;
      /**
       * Latitude of the landmark/area to center on
       */
      lat?: number | null;
      /**
       * Longitude of the landmark/area to center on
       */
      lng?: number | null;
      /**
       * E.g., "Eiffel Tower area", "Downtown district"
       */
      description?: string | null;
    };
  };
  /**
   * Points of Interest are automatically cached when coordinates change
   */
  poiDataCachedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: number;
  name: string;
  /**
   * ISO 4217 currency code (e.g., USD, EUR, GBP)
   */
  code: string;
  symbol: string;
  /**
   * Exchange rate to USD (updated via API)
   */
  exchangeRate?: number | null;
  /**
   * Last time the exchange rate was updated
   */
  exchangeRateUpdatedAt?: string | null;
  /**
   * All destinations using this currency
   */
  destinations?: {
    docs?: (number | Destination)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
  id: number;
  name: string;
  /**
   * Short region / state code (optional)
   */
  code?: string | null;
  country: number | Country;
  /**
   * Administrative level
   */
  type: 'state' | 'province' | 'region' | 'territory' | 'district';
  capital?: string | null;
  /**
   * All destinations in this region
   */
  destinations?: {
    docs?: (number | Destination)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Airline data with IATA/ICAO codes and callsigns
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "airlines".
 */
export interface Airline {
  id: number;
  /**
   * Full name of the airline
   */
  name: string;
  /**
   * Alternative name or alias
   */
  alias?: string | null;
  /**
   * IATA code (2-letter code)
   */
  iata?: string | null;
  /**
   * ICAO code (3-letter code)
   */
  icao?: string | null;
  /**
   * Radio callsign used by pilots
   */
  callsign?: string | null;
  /**
   * Country where the airline is based
   */
  country: string;
  /**
   * Whether the airline is currently active
   */
  active?: boolean | null;
  /**
   * OpenFlights database ID
   */
  openflights_id?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Airport data with IATA/ICAO codes and location information
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "airports".
 */
export interface Airport {
  id: number;
  /**
   * Full name of the airport
   */
  name: string;
  /**
   * IATA code (3-letter code)
   */
  iata?: string | null;
  /**
   * ICAO code (4-letter code)
   */
  icao?: string | null;
  /**
   * City served by the airport
   */
  city: string;
  /**
   * Country where the airport is located
   */
  country: number | Country;
  /**
   * State/Province/Region where the airport is located
   */
  region?: (number | null) | Region;
  /**
   * Latitude coordinate
   */
  latitude: number;
  /**
   * Longitude coordinate
   */
  longitude: number;
  /**
   * Elevation in feet above sea level
   */
  elevation?: number | null;
  /**
   * Timezone of the airport
   */
  timezone?: (number | null) | Timezone;
  /**
   * Type/size of the airport
   */
  type?: ('large' | 'medium' | 'small' | 'heliport' | 'seaplane' | 'closed') | null;
  /**
   * OpenFlights database ID for data mapping
   */
  openflights_id?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Flight routes between airports
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "routes".
 */
export interface Route {
  id: number;
  /**
   * Auto-generated route code (e.g., AA-LAX-JFK)
   */
  routeCode?: string | null;
  /**
   * Airline operating this route
   */
  airline?: (number | null) | Airline;
  /**
   * Airline code (IATA or ICAO)
   */
  airline_code?: string | null;
  /**
   * Departure airport
   */
  sourceAirport?: (number | null) | Airport;
  /**
   * Source airport code (IATA or ICAO)
   */
  source_airport_code?: string | null;
  /**
   * Arrival airport
   */
  destinationAirport?: (number | null) | Airport;
  /**
   * Destination airport code (IATA or ICAO)
   */
  destination_airport_code?: string | null;
  /**
   * Whether this is a codeshare flight
   */
  codeshare?: boolean | null;
  /**
   * Number of stops (0 for direct flights)
   */
  stops?: number | null;
  /**
   * Aircraft types used on this route
   */
  equipment?:
    | {
        /**
         * Aircraft type code (e.g., 737, A320)
         */
        aircraft?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "travel-advisories".
 */
export interface TravelAdvisory {
  id: number;
  title: string;
  pubDate?: string | null;
  /**
   * Link to official advisory source
   */
  link?: string | null;
  threatLevel: '1' | '2' | '3' | '4';
  /**
   * Country name extracted from the advisory
   */
  countryTag?: string | null;
  /**
   * Link to country in our system
   */
  country?: (number | null) | Country;
  category?: ('advisory' | 'alert' | 'warning') | null;
  /**
   * Summary of the advisory
   */
  description?: string | null;
  /**
   * Regional threat levels within the country
   */
  regions?:
    | {
        region?: string | null;
        level?: ('1' | '2' | '3' | '4') | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Whether this advisory is currently active
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "visa-requirements".
 */
export interface VisaRequirement {
  id: number;
  passportCountry: number | Country;
  destinationCountry: number | Country;
  requirement: 'visa_free' | 'visa_on_arrival' | 'evisa' | 'eta' | 'visa_required' | 'no_admission';
  days?: number | null;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "michelin-restaurants".
 */
export interface MichelinRestaurant {
  id: number;
  name: string;
  /**
   * Michelin stars (1 – 3)
   */
  rating?: number | null;
  year?: number | null;
  link?: string | null;
  website?: string | null;
  phone?: string | null;
  /**
   * Images pulled from Michelin Guide
   */
  gallery?: (number | Media)[] | null;
  country?: (number | null) | Country;
  location?: {
    latitude?: number | null;
    longitude?: number | null;
    address?: string | null;
    city?: string | null;
    destination?: (number | null) | Destination;
  };
  type?: ('restaurant' | 'bib-gourmand' | 'green-star' | 'young-chef') | null;
  award?: string | null;
  cuisine?: string | null;
  priceRange?: ('1' | '2' | '3' | '4') | null;
  greenStar?: boolean | null;
  description?: string | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'religions';
        value: number | Religion;
      } | null)
    | ({
        relationTo: 'timezones';
        value: number | Timezone;
      } | null)
    | ({
        relationTo: 'countries';
        value: number | Country;
      } | null)
    | ({
        relationTo: 'currencies';
        value: number | Currency;
      } | null)
    | ({
        relationTo: 'languages';
        value: number | Language;
      } | null)
    | ({
        relationTo: 'regions';
        value: number | Region;
      } | null)
    | ({
        relationTo: 'airlines';
        value: number | Airline;
      } | null)
    | ({
        relationTo: 'airports';
        value: number | Airport;
      } | null)
    | ({
        relationTo: 'routes';
        value: number | Route;
      } | null)
    | ({
        relationTo: 'travel-advisories';
        value: number | TravelAdvisory;
      } | null)
    | ({
        relationTo: 'visa-requirements';
        value: number | VisaRequirement;
      } | null)
    | ({
        relationTo: 'michelin-restaurants';
        value: number | MichelinRestaurant;
      } | null)
    | ({
        relationTo: 'destinations';
        value: number | Destination;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        webGLText?: T | WebGLTextBlockSelect<T>;
        travelGlobe?: T | TravelGlobeBlockSelect<T>;
        threeDCarousel?: T | ThreeDCarouselBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  webglEnabled?: T;
  webglSettings?:
    | T
    | {
        distortion?: T;
        parallax?: T;
        hover?: T;
      };
  caption?: T;
  aspectRatio?: T;
  glassEffect?:
    | T
    | {
        enabled?: T;
        variant?: T;
        intensity?: T;
      };
  fluidOverlay?:
    | T
    | {
        enabled?: T;
        intensity?: T;
        color?: T;
      };
  webglEffects?:
    | T
    | {
        distortion?: T;
        parallax?: T;
        hover?: T;
        transition?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WebGLTextBlock_select".
 */
export interface WebGLTextBlockSelect<T extends boolean = true> {
  text?: T;
  fontSize?: T;
  textAlign?: T;
  effect?: T;
  color?: T;
  font?: T;
  animationTrigger?: T;
  secondaryText?: T;
  glassEffect?:
    | T
    | {
        enabled?: T;
        variant?: T;
        intensity?: T;
      };
  fluidOverlay?:
    | T
    | {
        enabled?: T;
        intensity?: T;
        color?: T;
      };
  webglEffects?:
    | T
    | {
        distortion?: T;
        parallax?: T;
        hover?: T;
        transition?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TravelGlobeBlock_select".
 */
export interface TravelGlobeBlockSelect<T extends boolean = true> {
  destinations?:
    | T
    | {
        id?: T;
        name?: T;
        position?:
          | T
          | {
              lat?: T;
              lng?: T;
            };
        visitors?: T;
        category?: T;
        description?: T;
        imageUrl?: T;
      };
  routes?:
    | T
    | {
        id?: T;
        from?: T;
        to?: T;
        flights?: T;
        type?: T;
      };
  globeSettings?:
    | T
    | {
        interactive?: T;
        autoRotate?: T;
        rotationSpeed?: T;
        showAtmosphere?: T;
        showClouds?: T;
        showNightLights?: T;
        enableFilters?: T;
      };
  appearance?:
    | T
    | {
        globeColor?: T;
        landColor?: T;
        atmosphereColor?: T;
        markerColor?: T;
        routeColor?: T;
      };
  customTextures?:
    | T
    | {
        earthTexture?: T;
        bumpTexture?: T;
        specularTexture?: T;
        cloudTexture?: T;
      };
  glassEffect?:
    | T
    | {
        enabled?: T;
        variant?: T;
        intensity?: T;
      };
  fluidOverlay?:
    | T
    | {
        enabled?: T;
        intensity?: T;
        color?: T;
      };
  webglEffects?:
    | T
    | {
        distortion?: T;
        parallax?: T;
        hover?: T;
        transition?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ThreeDCarouselBlock_select".
 */
export interface ThreeDCarouselBlockSelect<T extends boolean = true> {
  items?:
    | T
    | {
        image?: T;
        title?: T;
        subtitle?: T;
        description?: T;
        link?: T;
        metadata?:
          | T
          | {
              rating?: T;
              price?: T;
              location?: T;
              date?: T;
            };
        id?: T;
      };
  layout?: T;
  autoRotate?: T;
  rotationSpeed?: T;
  enableReflections?: T;
  enableParticles?: T;
  enableDepthFade?: T;
  radius?: T;
  spacing?: T;
  itemsVisible?: T;
  showControls?: T;
  showIndicators?: T;
  glassEffect?:
    | T
    | {
        enabled?: T;
        variant?: T;
        intensity?: T;
      };
  fluidOverlay?:
    | T
    | {
        enabled?: T;
        intensity?: T;
        color?: T;
      };
  webglEffects?:
    | T
    | {
        distortion?: T;
        parallax?: T;
        hover?: T;
        transition?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "religions_select".
 */
export interface ReligionsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  parentReligion?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timezones_select".
 */
export interface TimezonesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  label?: T;
  offset?: T;
  offsetMinutes?: T;
  isDST?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries_select".
 */
export interface CountriesSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  code3?: T;
  isoCode?: T;
  continent?: T;
  region?: T;
  subregion?: T;
  capital?: T;
  flag?: T;
  webDomain?: T;
  dialingCode?: T;
  demonym?: T;
  languages?: T;
  religions?:
    | T
    | {
        religion?: T;
        percentage?: T;
        id?: T;
      };
  timezones?: T;
  currencies?: T;
  neighboringCountries?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies_select".
 */
export interface CurrenciesSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  symbol?: T;
  exchangeRate?: T;
  exchangeRateUpdatedAt?: T;
  destinations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "languages_select".
 */
export interface LanguagesSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  nativeName?: T;
  destinations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  country?: T;
  type?: T;
  capital?: T;
  destinations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "airlines_select".
 */
export interface AirlinesSelect<T extends boolean = true> {
  name?: T;
  alias?: T;
  iata?: T;
  icao?: T;
  callsign?: T;
  country?: T;
  active?: T;
  openflights_id?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "airports_select".
 */
export interface AirportsSelect<T extends boolean = true> {
  name?: T;
  iata?: T;
  icao?: T;
  city?: T;
  country?: T;
  region?: T;
  latitude?: T;
  longitude?: T;
  elevation?: T;
  timezone?: T;
  type?: T;
  openflights_id?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "routes_select".
 */
export interface RoutesSelect<T extends boolean = true> {
  routeCode?: T;
  airline?: T;
  airline_code?: T;
  sourceAirport?: T;
  source_airport_code?: T;
  destinationAirport?: T;
  destination_airport_code?: T;
  codeshare?: T;
  stops?: T;
  equipment?:
    | T
    | {
        aircraft?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "travel-advisories_select".
 */
export interface TravelAdvisoriesSelect<T extends boolean = true> {
  title?: T;
  pubDate?: T;
  link?: T;
  threatLevel?: T;
  countryTag?: T;
  country?: T;
  category?: T;
  description?: T;
  regions?:
    | T
    | {
        region?: T;
        level?: T;
        id?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "visa-requirements_select".
 */
export interface VisaRequirementsSelect<T extends boolean = true> {
  passportCountry?: T;
  destinationCountry?: T;
  requirement?: T;
  days?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "michelin-restaurants_select".
 */
export interface MichelinRestaurantsSelect<T extends boolean = true> {
  name?: T;
  rating?: T;
  year?: T;
  link?: T;
  website?: T;
  phone?: T;
  gallery?: T;
  country?: T;
  location?:
    | T
    | {
        latitude?: T;
        longitude?: T;
        address?: T;
        city?: T;
        destination?: T;
      };
  type?: T;
  award?: T;
  cuisine?: T;
  priceRange?: T;
  greenStar?: T;
  description?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations_select".
 */
export interface DestinationsSelect<T extends boolean = true> {
  title?: T;
  locationData?:
    | T
    | {
        address?: T;
        coordinates?:
          | T
          | {
              lat?: T;
              lng?: T;
            };
        placeID?: T;
        country?: T;
        continent?: T;
        city?: T;
        isGoodForChildren?: T;
        isGoodForGroups?: T;
        priceLevel?: T;
        rating?: T;
        user_ratings_total?: T;
        reviews?:
          | T
          | {
              author_name?: T;
              rating?: T;
              text?: T;
              id?: T;
            };
        photos?:
          | T
          | {
              photo_reference?: T;
              height?: T;
              width?: T;
              id?: T;
            };
        tempCountryData?:
          | T
          | {
              countryName?: T;
              countryCode?: T;
              currencyCode?: T;
              languageCode?: T;
              region?: T;
            };
      };
  lat?: T;
  lng?: T;
  continent?: T;
  city?: T;
  state?: T;
  googleMapsUri?: T;
  countryRelation?: T;
  currencyRelation?: T;
  languagesRelation?: T;
  regionRelation?: T;
  country?: T;
  flagSvg?: T;
  languages?: T;
  countryData?:
    | T
    | {
        label?: T;
        code?: T;
        capital?: T;
        region?: T;
        currency?:
          | T
          | {
              code?: T;
              label?: T;
              symbol?: T;
            };
        language?:
          | T
          | {
              code?: T;
              label?: T;
              nativeName?: T;
            };
        flag?: T;
      };
  isGoodForChildren?: T;
  isGoodForGroups?: T;
  priceLevel?: T;
  rating?: T;
  user_ratings_total?: T;
  reviews?:
    | T
    | {
        author_name?: T;
        rating?: T;
        text?: T;
        id?: T;
      };
  featuredImage?: T;
  featuredVideo?: T;
  mediaGallery?: T;
  content?: T;
  relatedDestinations?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  enable3DMap?: T;
  areaExplorerConfig?:
    | T
    | {
        showPOIs?: T;
        poiTypes?: T;
        poiDensity?: T;
        searchRadius?: T;
        autoOrbit?: T;
        theme?: T;
        customCenter?:
          | T
          | {
              enabled?: T;
              lat?: T;
              lng?: T;
              description?: T;
            };
      };
  poiDataCachedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}